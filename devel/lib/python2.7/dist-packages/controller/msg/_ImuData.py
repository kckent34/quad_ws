"""autogenerated by genpy from controller/ImuData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ImuData(genpy.Message):
  _md5sum = "2ffa0158eafd09aab90668e8a07da7b7"
  _type = "controller/ImuData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 theta
float32 phi
float32 psi
float32 theta_dot
float32 phi_dot
float32 psi_dot
float32 psi_gyro_integration
float32 dt
int32 succ_read
"""
  __slots__ = ['theta','phi','psi','theta_dot','phi_dot','psi_dot','psi_gyro_integration','dt','succ_read']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       theta,phi,psi,theta_dot,phi_dot,psi_dot,psi_gyro_integration,dt,succ_read

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ImuData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.theta is None:
        self.theta = 0.
      if self.phi is None:
        self.phi = 0.
      if self.psi is None:
        self.psi = 0.
      if self.theta_dot is None:
        self.theta_dot = 0.
      if self.phi_dot is None:
        self.phi_dot = 0.
      if self.psi_dot is None:
        self.psi_dot = 0.
      if self.psi_gyro_integration is None:
        self.psi_gyro_integration = 0.
      if self.dt is None:
        self.dt = 0.
      if self.succ_read is None:
        self.succ_read = 0
    else:
      self.theta = 0.
      self.phi = 0.
      self.psi = 0.
      self.theta_dot = 0.
      self.phi_dot = 0.
      self.psi_dot = 0.
      self.psi_gyro_integration = 0.
      self.dt = 0.
      self.succ_read = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8fi.pack(_x.theta, _x.phi, _x.psi, _x.theta_dot, _x.phi_dot, _x.psi_dot, _x.psi_gyro_integration, _x.dt, _x.succ_read))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.theta, _x.phi, _x.psi, _x.theta_dot, _x.phi_dot, _x.psi_dot, _x.psi_gyro_integration, _x.dt, _x.succ_read,) = _struct_8fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8fi.pack(_x.theta, _x.phi, _x.psi, _x.theta_dot, _x.phi_dot, _x.psi_dot, _x.psi_gyro_integration, _x.dt, _x.succ_read))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.theta, _x.phi, _x.psi, _x.theta_dot, _x.phi_dot, _x.psi_dot, _x.psi_gyro_integration, _x.dt, _x.succ_read,) = _struct_8fi.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8fi = struct.Struct("<8fi")
